##1##
# ## Staging Area가 필요한 이유: 
# ## Staging Area를 활용하면 대상을 선별하고 커밋을 분리하여 효율적으로 이력을 관리할 수 있습니다. 
# Staging Area는 커밋 전의 내용을 담고 있지 않나? 
# 예를 들면 add를 n번 하고 commit 1번 한 경우에 커밋을 분리할 수 있나?
'''

'''

##2##
# 해시 테이블은 키값을 숫자?주소?로 바꿔줘야하니까 그만큼 연산이 필요함
# -> 데이터 값이 적을 때는 키를 변환해주는 과정으로 인해 비효율을 초래하지 않나?
# -> 규모가 있는 데이터에 적용하는 것이 유리하지 않나?
'''

'''

##3##
# 해시테이블과 비교되는 것이 이진탐색인데 
# 해시테이블은 해시함수를 통해 키값을 해시값으로 대응시키는 과정이, 
# 이진탐색은 배열을 정렬시키는 과정이 필요함.
# 해시는 O(n), 이진탐색은 O(n^2)??(n!이 O(n^2)인가..) ==> 해시가 더 빠름
# 값 탐색과정도 해시는 O(1), 이진탐색은 O(n)의 절반...?, ==> 해시가 더 빠름
'''

'''

##4##
# 해시테이블의 충돌 상황에서 Open Addressing을 통해 새 주소값을 부여했는데, 
# 그 주소가 테이블의 공간을 초과한다면? 
# (테이블의 여유공간은 충분한 상황)ㅁ
'''
아니지. 그뭐냐. 
나머지 연산자로 계산을 하니 초과한다고 한들 나머지 연산으로 보정하니 제 위치 유지 가능.
'''

##5##
# 파이썬에서는 딕셔너리는 해시테이블에 속하지만, 다른 언어에서는 그렇지 않을 수 있다.
# C# 예:
# 해시테이블
# - Non-Generic, 박싱언박싱 o
# - 키/값 모두 오브젝트를 입력받는다.
# 딕셔너리
# -Generic, 박싱언박싱 일어나지 않음
# - 키/값 모두 strong type을 입력받는다.(선언시 타입 입력 필수)
'''

'''